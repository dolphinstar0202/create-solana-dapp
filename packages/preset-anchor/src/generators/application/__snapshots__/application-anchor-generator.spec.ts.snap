// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`application generator should generate app with "counter" template 1`] = `
"{
  "tsconfig.json": {
    "path": "anchor-app/tsconfig.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": \\"../tsconfig.base.json\\",\\n  \\"compilerOptions\\": {\\n    \\"module\\": \\"commonjs\\"\\n  },\\n  \\"files\\": [],\\n  \\"include\\": [],\\n  \\"references\\": [\\n    {\\n      \\"path\\": \\"./tsconfig.lib.json\\"\\n    },\\n    {\\n      \\"path\\": \\"./tsconfig.spec.json\\"\\n    }\\n  ]\\n}\\n"
  },
  "README.md": {
    "path": "anchor-app/README.md",
    "isBinary": false,
    "content": "# anchor-app\\n\\nThis library was generated with [Nx](https://nx.dev).\\n\\n## Building\\n\\nRun \`nx build anchor-app\` to build the library.\\n\\n## Running unit tests\\n\\nRun \`nx test anchor-app\` to execute the unit tests via [Jest](https://jestjs.io).\\n"
  },
  "src": {
    "path": "anchor-app/src",
    "children": {
      "index.ts": {
        "path": "anchor-app/src/index.ts",
        "isBinary": false,
        "content": "export * from '../target/types/counter';\\n"
      }
    }
  },
  "tsconfig.lib.json": {
    "path": "anchor-app/tsconfig.lib.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": \\"./tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"outDir\\": \\"../dist/out-tsc\\",\\n    \\"declaration\\": true,\\n    \\"types\\": [\\"node\\"]\\n  },\\n  \\"include\\": [\\"src/**/*.ts\\"],\\n  \\"exclude\\": [\\"jest.config.ts\\", \\"src/**/*.spec.ts\\", \\"src/**/*.test.ts\\"]\\n}\\n"
  },
  ".swcrc": {
    "path": "anchor-app/.swcrc",
    "isBinary": false,
    "content": "{\\n  \\"jsc\\": {\\n    \\"target\\": \\"es2017\\",\\n    \\"parser\\": {\\n      \\"syntax\\": \\"typescript\\",\\n      \\"decorators\\": true,\\n      \\"dynamicImport\\": true\\n    },\\n    \\"transform\\": {\\n      \\"decoratorMetadata\\": true,\\n      \\"legacyDecorator\\": true\\n    },\\n    \\"keepClassNames\\": true,\\n    \\"externalHelpers\\": true,\\n    \\"loose\\": true\\n  },\\n  \\"module\\": {\\n    \\"type\\": \\"es6\\"\\n  },\\n  \\"sourceMaps\\": true,\\n  \\"exclude\\": [\\n    \\"jest.config.ts\\",\\n    \\".*\\\\\\\\.spec.tsx?$\\",\\n    \\".*\\\\\\\\.test.tsx?$\\",\\n    \\"./src/jest-setup.ts$\\",\\n    \\"./**/jest-setup.ts$\\",\\n    \\".*.js$\\"\\n  ]\\n}\\n"
  },
  "package.json": {
    "path": "anchor-app/package.json",
    "isBinary": false,
    "content": "{\\n  \\"name\\": \\"@proj/anchor-app\\",\\n  \\"version\\": \\"0.0.1\\",\\n  \\"dependencies\\": {},\\n  \\"type\\": \\"commonjs\\",\\n  \\"main\\": \\"./index.cjs\\",\\n  \\"module\\": \\"./index.js\\"\\n}\\n"
  },
  "project.json": {
    "path": "anchor-app/project.json",
    "isBinary": false,
    "content": "{\\n  \\"name\\": \\"anchor-app\\",\\n  \\"$schema\\": \\"../node_modules/nx/schemas/project-schema.json\\",\\n  \\"sourceRoot\\": \\"anchor-app/src\\",\\n  \\"projectType\\": \\"library\\",\\n  \\"targets\\": {\\n    \\"build\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor build\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"lint\\": {\\n      \\"executor\\": \\"@nx/eslint:lint\\",\\n      \\"outputs\\": [\\"{options.outputFile}\\"],\\n      \\"options\\": {\\n        \\"lintFilePatterns\\": [\\"anchor-app/**/*.ts\\", \\"anchor-app/package.json\\"]\\n      }\\n    },\\n    \\"test\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor test\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"clean\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor clean\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"deploy\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor deploy\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"localnet\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor localnet\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"publish\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor publish\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"jest\\": {\\n      \\"executor\\": \\"@nx/jest:jest\\",\\n      \\"outputs\\": [\\"{workspaceRoot}/coverage/{projectRoot}\\"],\\n      \\"options\\": {\\n        \\"jestConfig\\": \\"anchor-app/jest.config.ts\\",\\n        \\"passWithNoTests\\": true\\n      },\\n      \\"configurations\\": {\\n        \\"ci\\": {\\n          \\"ci\\": true,\\n          \\"codeCoverage\\": true\\n        }\\n      }\\n    }\\n  },\\n  \\"tags\\": []\\n}\\n"
  },
  ".eslintrc.json": {
    "path": "anchor-app/.eslintrc.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": [\\"../.eslintrc.json\\"],\\n  \\"ignorePatterns\\": [\\"!**/*\\"],\\n  \\"overrides\\": [\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\", \\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.json\\"],\\n      \\"parser\\": \\"jsonc-eslint-parser\\",\\n      \\"rules\\": {\\n        \\"@nx/dependency-checks\\": [\\n          \\"error\\",\\n          {\\n            \\"ignoredFiles\\": [\\"{projectRoot}/rollup.config.{js,ts,mjs,mts}\\"]\\n          }\\n        ]\\n      }\\n    }\\n  ]\\n}\\n"
  },
  "jest.config.ts": {
    "path": "anchor-app/jest.config.ts",
    "isBinary": false,
    "content": "/* eslint-disable */\\nimport { readFileSync } from 'fs';\\n\\n// Reading the SWC compilation config and remove the \\"exclude\\"\\n// for the test files to be compiled by SWC\\nconst { exclude: _, ...swcJestConfig } = JSON.parse(\\n  readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')\\n);\\n\\n// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.\\n// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to \\"exclude\\"\\nif (swcJestConfig.swcrc === undefined) {\\n  swcJestConfig.swcrc = false;\\n}\\n\\n// Uncomment if using global setup/teardown files being transformed via swc\\n// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries\\n// jest needs EsModule Interop to find the default exported setup/teardown functions\\n// swcJestConfig.module.noInterop = false;\\n\\nexport default {\\n  displayName: 'anchor-app',\\n  preset: '../jest.preset.js',\\n  transform: {\\n    '^.+\\\\\\\\.[tj]s$': ['@swc/jest', swcJestConfig],\\n  },\\n  moduleFileExtensions: ['ts', 'js', 'html'],\\n  testEnvironment: '',\\n  coverageDirectory: '../coverage/anchor-app',\\n};\\n"
  },
  "tsconfig.spec.json": {
    "path": "anchor-app/tsconfig.spec.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": \\"./tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"outDir\\": \\"../dist/out-tsc\\",\\n    \\"module\\": \\"commonjs\\",\\n    \\"types\\": [\\"jest\\", \\"node\\"]\\n  },\\n  \\"include\\": [\\n    \\"jest.config.ts\\",\\n    \\"src/**/*.test.ts\\",\\n    \\"src/**/*.spec.ts\\",\\n    \\"src/**/*.d.ts\\"\\n  ]\\n}\\n"
  },
  "Anchor.toml": {
    "path": "anchor-app/Anchor.toml",
    "isBinary": false,
    "content": "[features]\\nseeds = false\\nskip-lint = false\\n[programs.localnet]\\ncounter = \\"EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8\\"\\n\\n[registry]\\nurl = \\"https://api.apr.dev\\"\\n\\n[provider]\\ncluster = \\"Localnet\\"\\nwallet = \\"~/.config/solana/id.json\\"\\n\\n[scripts]\\ntest = \\"../node_modules/.bin/nx run anchor-app:jest\\"\\n"
  },
  "Cargo.toml": {
    "path": "anchor-app/Cargo.toml",
    "isBinary": false,
    "content": "[workspace]\\nmembers = [\\n    \\"programs/*\\"\\n]\\nresolver = \\"2\\"\\n\\n[profile.release]\\noverflow-checks = true\\nlto = \\"fat\\"\\ncodegen-units = 1\\n[profile.release.build-override]\\nopt-level = 3\\nincremental = false\\ncodegen-units = 1\\n"
  },
  "migrations": {
    "path": "anchor-app/migrations",
    "children": {
      "deploy.ts": {
        "path": "anchor-app/migrations/deploy.ts",
        "isBinary": false,
        "content": "// Migrations are an early feature. Currently, they're nothing more than this\\n// single deploy script that's invoked from the CLI, injecting a provider\\n// configured from the workspace's Anchor.toml.\\n\\nconst anchor = require('@coral-xyz/anchor');\\n\\nmodule.exports = async function (provider) {\\n  // Configure client to use the provider.\\n  anchor.setProvider(provider);\\n\\n  // Add your deploy script here.\\n};\\n"
      }
    }
  },
  "programs": {
    "path": "anchor-app/programs",
    "children": {
      "counter": {
        "path": "anchor-app/programs/counter",
        "children": {
          "Cargo.toml": {
            "path": "anchor-app/programs/counter/Cargo.toml",
            "isBinary": false,
            "content": "[package]\\nname = \\"counter\\"\\nversion = \\"0.1.0\\"\\ndescription = \\"Created with Anchor\\"\\nedition = \\"2021\\"\\n\\n[lib]\\ncrate-type = [\\"cdylib\\", \\"lib\\"]\\nname = \\"counter\\"\\n\\n[features]\\nno-entrypoint = []\\nno-idl = []\\nno-log-ix-name = []\\ncpi = [\\"no-entrypoint\\"]\\ndefault = []\\n\\n[dependencies]\\nanchor-lang = \\"0.28.0\\"\\n"
          },
          "Xargo.toml": {
            "path": "anchor-app/programs/counter/Xargo.toml",
            "isBinary": false,
            "content": "[target.bpfel-unknown-unknown.dependencies.std]\\nfeatures = []\\n"
          },
          "src": {
            "path": "anchor-app/programs/counter/src",
            "children": {
              "lib.rs": {
                "path": "anchor-app/programs/counter/src/lib.rs",
                "isBinary": false,
                "content": "#![allow(clippy::result_large_err)]\\n\\nuse anchor_lang::prelude::*;\\n\\ndeclare_id!(\\"EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8\\");\\n\\n#[program]\\npub mod counter {\\n    use super::*;\\n\\n  pub fn initialize_counter(_ctx: Context<InitializeCounter>) -> Result<()> {\\n    Ok(())\\n  }\\n\\n  pub fn increment(ctx: Context<Increment>) -> Result<()> {\\n    ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();\\n    Ok(())\\n  }\\n}\\n\\n#[derive(Accounts)]\\npub struct InitializeCounter<'info> {\\n  #[account(mut)]\\n  pub payer: Signer<'info>,\\n\\n  #[account(\\n  init,\\n  space = 8 + Counter::INIT_SPACE,\\n  payer = payer\\n  )]\\n  pub counter: Account<'info, Counter>,\\n  pub system_program: Program<'info, System>,\\n}\\n\\n#[derive(Accounts)]\\npub struct Increment<'info> {\\n  #[account(mut)]\\n  pub counter: Account<'info, Counter>,\\n}\\n\\n#[account]\\n#[derive(InitSpace)]\\npub struct Counter {\\n  count: u64,\\n}\\n"
              }
            }
          }
        }
      }
    }
  },
  "target": {
    "path": "anchor-app/target",
    "children": {
      "types": {
        "path": "anchor-app/target/types",
        "children": {
          "counter.ts": {
            "path": "anchor-app/target/types/counter.ts",
            "isBinary": false,
            "content": "export type Counter = {\\n  version: '0.1.0';\\n  name: 'counter';\\n  instructions: [\\n    {\\n      name: 'initializeCounter';\\n      accounts: [\\n        {\\n          name: 'payer';\\n          isMut: true;\\n          isSigner: true;\\n        },\\n        {\\n          name: 'counter';\\n          isMut: true;\\n          isSigner: true;\\n        },\\n        {\\n          name: 'systemProgram';\\n          isMut: false;\\n          isSigner: false;\\n        }\\n      ];\\n      args: [];\\n    },\\n    {\\n      name: 'increment';\\n      accounts: [\\n        {\\n          name: 'counter';\\n          isMut: true;\\n          isSigner: false;\\n        }\\n      ];\\n      args: [];\\n    }\\n  ];\\n  accounts: [\\n    {\\n      name: 'counter';\\n      type: {\\n        kind: 'struct';\\n        fields: [\\n          {\\n            name: 'count';\\n            type: 'u64';\\n          }\\n        ];\\n      };\\n    }\\n  ];\\n};\\n\\nexport const IDL: Counter = {\\n  version: '0.1.0',\\n  name: 'counter',\\n  instructions: [\\n    {\\n      name: 'initializeCounter',\\n      accounts: [\\n        {\\n          name: 'payer',\\n          isMut: true,\\n          isSigner: true,\\n        },\\n        {\\n          name: 'counter',\\n          isMut: true,\\n          isSigner: true,\\n        },\\n        {\\n          name: 'systemProgram',\\n          isMut: false,\\n          isSigner: false,\\n        },\\n      ],\\n      args: [],\\n    },\\n    {\\n      name: 'increment',\\n      accounts: [\\n        {\\n          name: 'counter',\\n          isMut: true,\\n          isSigner: false,\\n        },\\n      ],\\n      args: [],\\n    },\\n  ],\\n  accounts: [\\n    {\\n      name: 'counter',\\n      type: {\\n        kind: 'struct',\\n        fields: [\\n          {\\n            name: 'count',\\n            type: 'u64',\\n          },\\n        ],\\n      },\\n    },\\n  ],\\n};\\n"
          }
        }
      }
    }
  },
  "tests": {
    "path": "anchor-app/tests",
    "children": {
      "counter.spec.ts": {
        "path": "anchor-app/tests/counter.spec.ts",
        "isBinary": false,
        "content": "import * as anchor from '@coral-xyz/anchor';\\nimport { Program } from '@coral-xyz/anchor';\\nimport { Counter } from '../target/types/counter';\\n\\ndescribe('counter', () => {\\n  // Configure the client to use the local cluster.\\n  const provider = anchor.AnchorProvider.env();\\n  anchor.setProvider(provider);\\n  const payer = provider.wallet as anchor.Wallet;\\n\\n  const program = anchor.workspace.Counter as Program<Counter>;\\n\\n  // Generate a new keypair for the counter account\\n  const counterKeypair = new Keypair();\\n\\n  it('Initialize Counter', async () => {\\n    await program.methods\\n      .initializeCounter()\\n      .accounts({\\n        counter: counterKeypair.publicKey,\\n        payer: payer.publicKey,\\n      })\\n      .signers([counterKeypair])\\n      .rpc();\\n\\n    const currentCount = await program.account.counter.fetch(\\n      counterKeypair.publicKey\\n    );\\n\\n    expect(currentCount.count.toNumber()).toEqual(0);\\n  });\\n\\n  it('Increment Counter', async () => {\\n    await program.methods\\n      .increment()\\n      .accounts({ counter: counterKeypair.publicKey })\\n      .rpc();\\n\\n    const currentCount = await program.account.counter.fetch(\\n      counterKeypair.publicKey\\n    );\\n\\n    expect(currentCount.count.toNumber()).toEqual(1);\\n  });\\n\\n  it('Increment Counter Again', async () => {\\n    await program.methods\\n      .increment()\\n      .accounts({ counter: counterKeypair.publicKey })\\n      .rpc();\\n\\n    const currentCount = await program.account.counter.fetch(\\n      counterKeypair.publicKey\\n    );\\n\\n    expect(currentCount.count.toNumber()).toEqual(2);\\n  });\\n});\\n"
      }
    }
  }
}"
`;

exports[`application generator should generate app with "counter" template 2`] = `
"{
  "compilerOptions": {
    "paths": {
      "@proj/anchor-app": ["anchor-app/src/index.ts"]
    }
  }
}
"
`;

exports[`application generator should generate app with "hello-world" template 1`] = `
"{
  "tsconfig.json": {
    "path": "anchor-app/tsconfig.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": \\"../tsconfig.base.json\\",\\n  \\"compilerOptions\\": {\\n    \\"module\\": \\"commonjs\\"\\n  },\\n  \\"files\\": [],\\n  \\"include\\": [],\\n  \\"references\\": [\\n    {\\n      \\"path\\": \\"./tsconfig.lib.json\\"\\n    },\\n    {\\n      \\"path\\": \\"./tsconfig.spec.json\\"\\n    }\\n  ]\\n}\\n"
  },
  "README.md": {
    "path": "anchor-app/README.md",
    "isBinary": false,
    "content": "# anchor-app\\n\\nThis library was generated with [Nx](https://nx.dev).\\n\\n## Building\\n\\nRun \`nx build anchor-app\` to build the library.\\n\\n## Running unit tests\\n\\nRun \`nx test anchor-app\` to execute the unit tests via [Jest](https://jestjs.io).\\n"
  },
  "src": {
    "path": "anchor-app/src",
    "children": {
      "index.ts": {
        "path": "anchor-app/src/index.ts",
        "isBinary": false,
        "content": "export * from '../target/types/hello_world';\\n"
      }
    }
  },
  "tsconfig.lib.json": {
    "path": "anchor-app/tsconfig.lib.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": \\"./tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"outDir\\": \\"../dist/out-tsc\\",\\n    \\"declaration\\": true,\\n    \\"types\\": [\\"node\\"]\\n  },\\n  \\"include\\": [\\"src/**/*.ts\\"],\\n  \\"exclude\\": [\\"jest.config.ts\\", \\"src/**/*.spec.ts\\", \\"src/**/*.test.ts\\"]\\n}\\n"
  },
  ".swcrc": {
    "path": "anchor-app/.swcrc",
    "isBinary": false,
    "content": "{\\n  \\"jsc\\": {\\n    \\"target\\": \\"es2017\\",\\n    \\"parser\\": {\\n      \\"syntax\\": \\"typescript\\",\\n      \\"decorators\\": true,\\n      \\"dynamicImport\\": true\\n    },\\n    \\"transform\\": {\\n      \\"decoratorMetadata\\": true,\\n      \\"legacyDecorator\\": true\\n    },\\n    \\"keepClassNames\\": true,\\n    \\"externalHelpers\\": true,\\n    \\"loose\\": true\\n  },\\n  \\"module\\": {\\n    \\"type\\": \\"es6\\"\\n  },\\n  \\"sourceMaps\\": true,\\n  \\"exclude\\": [\\n    \\"jest.config.ts\\",\\n    \\".*\\\\\\\\.spec.tsx?$\\",\\n    \\".*\\\\\\\\.test.tsx?$\\",\\n    \\"./src/jest-setup.ts$\\",\\n    \\"./**/jest-setup.ts$\\",\\n    \\".*.js$\\"\\n  ]\\n}\\n"
  },
  "package.json": {
    "path": "anchor-app/package.json",
    "isBinary": false,
    "content": "{\\n  \\"name\\": \\"@proj/anchor-app\\",\\n  \\"version\\": \\"0.0.1\\",\\n  \\"dependencies\\": {},\\n  \\"type\\": \\"commonjs\\",\\n  \\"main\\": \\"./index.cjs\\",\\n  \\"module\\": \\"./index.js\\"\\n}\\n"
  },
  "project.json": {
    "path": "anchor-app/project.json",
    "isBinary": false,
    "content": "{\\n  \\"name\\": \\"anchor-app\\",\\n  \\"$schema\\": \\"../node_modules/nx/schemas/project-schema.json\\",\\n  \\"sourceRoot\\": \\"anchor-app/src\\",\\n  \\"projectType\\": \\"library\\",\\n  \\"targets\\": {\\n    \\"build\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor build\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"lint\\": {\\n      \\"executor\\": \\"@nx/eslint:lint\\",\\n      \\"outputs\\": [\\"{options.outputFile}\\"],\\n      \\"options\\": {\\n        \\"lintFilePatterns\\": [\\"anchor-app/**/*.ts\\", \\"anchor-app/package.json\\"]\\n      }\\n    },\\n    \\"test\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor test\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"clean\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor clean\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"deploy\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor deploy\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"localnet\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor localnet\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"publish\\": {\\n      \\"executor\\": \\"nx:run-commands\\",\\n      \\"options\\": {\\n        \\"cwd\\": \\"anchor-app\\",\\n        \\"commands\\": [\\"anchor publish\\"],\\n        \\"parallel\\": false\\n      }\\n    },\\n    \\"jest\\": {\\n      \\"executor\\": \\"@nx/jest:jest\\",\\n      \\"outputs\\": [\\"{workspaceRoot}/coverage/{projectRoot}\\"],\\n      \\"options\\": {\\n        \\"jestConfig\\": \\"anchor-app/jest.config.ts\\",\\n        \\"passWithNoTests\\": true\\n      },\\n      \\"configurations\\": {\\n        \\"ci\\": {\\n          \\"ci\\": true,\\n          \\"codeCoverage\\": true\\n        }\\n      }\\n    }\\n  },\\n  \\"tags\\": []\\n}\\n"
  },
  ".eslintrc.json": {
    "path": "anchor-app/.eslintrc.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": [\\"../.eslintrc.json\\"],\\n  \\"ignorePatterns\\": [\\"!**/*\\"],\\n  \\"overrides\\": [\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\", \\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.ts\\", \\"*.tsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.js\\", \\"*.jsx\\"],\\n      \\"rules\\": {}\\n    },\\n    {\\n      \\"files\\": [\\"*.json\\"],\\n      \\"parser\\": \\"jsonc-eslint-parser\\",\\n      \\"rules\\": {\\n        \\"@nx/dependency-checks\\": [\\n          \\"error\\",\\n          {\\n            \\"ignoredFiles\\": [\\"{projectRoot}/rollup.config.{js,ts,mjs,mts}\\"]\\n          }\\n        ]\\n      }\\n    }\\n  ]\\n}\\n"
  },
  "jest.config.ts": {
    "path": "anchor-app/jest.config.ts",
    "isBinary": false,
    "content": "/* eslint-disable */\\nimport { readFileSync } from 'fs';\\n\\n// Reading the SWC compilation config and remove the \\"exclude\\"\\n// for the test files to be compiled by SWC\\nconst { exclude: _, ...swcJestConfig } = JSON.parse(\\n  readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')\\n);\\n\\n// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.\\n// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to \\"exclude\\"\\nif (swcJestConfig.swcrc === undefined) {\\n  swcJestConfig.swcrc = false;\\n}\\n\\n// Uncomment if using global setup/teardown files being transformed via swc\\n// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries\\n// jest needs EsModule Interop to find the default exported setup/teardown functions\\n// swcJestConfig.module.noInterop = false;\\n\\nexport default {\\n  displayName: 'anchor-app',\\n  preset: '../jest.preset.js',\\n  transform: {\\n    '^.+\\\\\\\\.[tj]s$': ['@swc/jest', swcJestConfig],\\n  },\\n  moduleFileExtensions: ['ts', 'js', 'html'],\\n  testEnvironment: '',\\n  coverageDirectory: '../coverage/anchor-app',\\n};\\n"
  },
  "tsconfig.spec.json": {
    "path": "anchor-app/tsconfig.spec.json",
    "isBinary": false,
    "content": "{\\n  \\"extends\\": \\"./tsconfig.json\\",\\n  \\"compilerOptions\\": {\\n    \\"outDir\\": \\"../dist/out-tsc\\",\\n    \\"module\\": \\"commonjs\\",\\n    \\"types\\": [\\"jest\\", \\"node\\"]\\n  },\\n  \\"include\\": [\\n    \\"jest.config.ts\\",\\n    \\"src/**/*.test.ts\\",\\n    \\"src/**/*.spec.ts\\",\\n    \\"src/**/*.d.ts\\"\\n  ]\\n}\\n"
  },
  "Anchor.toml": {
    "path": "anchor-app/Anchor.toml",
    "isBinary": false,
    "content": "[features]\\nseeds = false\\nskip-lint = false\\n[programs.localnet]\\nhello_world = \\"EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8\\"\\n\\n[registry]\\nurl = \\"https://api.apr.dev\\"\\n\\n[provider]\\ncluster = \\"Localnet\\"\\nwallet = \\"~/.config/solana/id.json\\"\\n\\n[scripts]\\ntest = \\"../node_modules/.bin/nx run anchor-app:jest\\"\\n"
  },
  "Cargo.toml": {
    "path": "anchor-app/Cargo.toml",
    "isBinary": false,
    "content": "[workspace]\\nmembers = [\\n    \\"programs/*\\"\\n]\\nresolver = \\"2\\"\\n\\n[profile.release]\\noverflow-checks = true\\nlto = \\"fat\\"\\ncodegen-units = 1\\n[profile.release.build-override]\\nopt-level = 3\\nincremental = false\\ncodegen-units = 1\\n"
  },
  "migrations": {
    "path": "anchor-app/migrations",
    "children": {
      "deploy.ts": {
        "path": "anchor-app/migrations/deploy.ts",
        "isBinary": false,
        "content": "// Migrations are an early feature. Currently, they're nothing more than this\\n// single deploy script that's invoked from the CLI, injecting a provider\\n// configured from the workspace's Anchor.toml.\\n\\nconst anchor = require('@coral-xyz/anchor');\\n\\nmodule.exports = async function (provider) {\\n  // Configure client to use the provider.\\n  anchor.setProvider(provider);\\n\\n  // Add your deploy script here.\\n};\\n"
      }
    }
  },
  "programs": {
    "path": "anchor-app/programs",
    "children": {
      "hello-world": {
        "path": "anchor-app/programs/hello-world",
        "children": {
          "Cargo.toml": {
            "path": "anchor-app/programs/hello-world/Cargo.toml",
            "isBinary": false,
            "content": "[package]\\nname = \\"hello-world\\"\\nversion = \\"0.1.0\\"\\ndescription = \\"Created with Anchor\\"\\nedition = \\"2021\\"\\n\\n[lib]\\ncrate-type = [\\"cdylib\\", \\"lib\\"]\\nname = \\"hello_world\\"\\n\\n[features]\\nno-entrypoint = []\\nno-idl = []\\nno-log-ix-name = []\\ncpi = [\\"no-entrypoint\\"]\\ndefault = []\\n\\n[dependencies]\\nanchor-lang = \\"0.28.0\\"\\n"
          },
          "Xargo.toml": {
            "path": "anchor-app/programs/hello-world/Xargo.toml",
            "isBinary": false,
            "content": "[target.bpfel-unknown-unknown.dependencies.std]\\nfeatures = []\\n"
          },
          "src": {
            "path": "anchor-app/programs/hello-world/src",
            "children": {
              "lib.rs": {
                "path": "anchor-app/programs/hello-world/src/lib.rs",
                "isBinary": false,
                "content": "use anchor_lang::prelude::*;\\n\\ndeclare_id!(\\"EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8\\");\\n\\n#[program]\\npub mod hello_world {\\n    use super::*;\\n\\n    pub fn initialize(_ctx: Context<Initialize>) -> Result<()> {\\n        msg!(\\"Hello World!\\");\\n        Ok(())\\n    }\\n}\\n\\n#[derive(Accounts)]\\npub struct Initialize {}\\n"
              }
            }
          }
        }
      }
    }
  },
  "target": {
    "path": "anchor-app/target",
    "children": {
      "types": {
        "path": "anchor-app/target/types",
        "children": {
          "hello_world.ts": {
            "path": "anchor-app/target/types/hello_world.ts",
            "isBinary": false,
            "content": "export type HelloWorld = {\\n  version: '0.1.0';\\n  name: 'hello_world';\\n  instructions: [\\n    {\\n      name: 'initialize';\\n      accounts: [];\\n      args: [];\\n    }\\n  ];\\n};\\n\\nexport const IDL: HelloWorld = {\\n  version: '0.1.0',\\n  name: 'hello_world',\\n  instructions: [\\n    {\\n      name: 'initialize',\\n      accounts: [],\\n      args: [],\\n    },\\n  ],\\n};\\n"
          }
        }
      }
    }
  },
  "tests": {
    "path": "anchor-app/tests",
    "children": {
      "hello-world.spec.ts": {
        "path": "anchor-app/tests/hello-world.spec.ts",
        "isBinary": false,
        "content": "import * as anchor from '@coral-xyz/anchor';\\nimport { Program } from '@coral-xyz/anchor';\\nimport { HelloWorld } from '../target/types/hello_world';\\n\\ndescribe('hello-world', () => {\\n  // Configure the client to use the local cluster.\\n  anchor.setProvider(anchor.AnchorProvider.env());\\n\\n  const program = anchor.workspace.HelloWorld as Program<HelloWorld>;\\n\\n  it('Is initialized!', async () => {\\n    // Add your test here.\\n    const tx = await program.methods.initialize().rpc();\\n    console.log('Your transaction signature', tx);\\n  });\\n});\\n"
      }
    }
  }
}"
`;

exports[`application generator should generate app with "hello-world" template 2`] = `
"{
  "compilerOptions": {
    "paths": {
      "@proj/anchor-app": ["anchor-app/src/index.ts"]
    }
  }
}
"
`;
